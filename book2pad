#!/usr/bin/env python
#-*- coding: utf8 -*-
import os
import sys
import hashlib
import shutil
import argparse
import re
import traceback
import pyexifinfo as exif
import zipfile
import time
from biplist import *
from binaryornot.check import is_binary

class IBooks():
    def __init__(self, plist):
        self.plist = plist
        self.ibooks_path = os.path.basename(self.plist)
        self.init_tree()

    def init_tree(self):
        self.is_binary = False
        self.search_tree = {}
        self.tree = {
            'Books': []
        }
        if os.path.exists(self.plist) and os.path.isfile(self.plist):
            try:
                self.is_binary = is_binary(self.plist)
                self.tree = readPlist(self.plist)
            except InvalidPlistException:
                print "Invalid plist, re-init plist file!"
            except IOError:
                print "For handling a bug fuse confusing while file not exists, Just ignore it"
            except:
                print "Unexpected error:", sys.exc_info()[0]
                print "You should tried again!"
                raise
                sys.exit()

        if len(self.tree['Books']) > 0:
            for item in self.tree['Books']:
                self.search_tree[os.path.basename(item['Path'])] = item

    def add_book(self, book):
        global books_adding
        self.search_tree[book.get_attrib('Package Hash')] = book.tree

    def remove_book(self, book, delete_file = False):
        dest = os.path.dirname(self.ibooks_path)
        filename = os.path.basename(book['Path'])
        if filename in self.search_tree:
            del self.search_tree[filename]
            if delete_file:
                book_path = os.path.join(dest, os.path.basename(book['Path']))
                if os.path.isfile(book_path):
                    os.remove(book_path)
                elif os.path.isdir(book_path):
                    shutil.rmtree(book_path)


    def is_same(self, book_a, book_b):
        if book_a['Genre'] == book_b['Genre'] and book_a['Name'] == book_b['Name'] and \
                        book_a['Artist'] == book_b['Artist'] and book_a['Package Hash'] == book_b['Package Hash']:
            return True

        return False


    def check_book(self, book):
        if book['filename'] in self.search_tree:
            item = self.search_tree[book['filename']]
            if item['Genre'] == book['genre'] and item['Name'] == book['title'] and \
                            item['Artist'] == book['author'] and item['Package Hash'] == book['hash']:
                return True

        return False

    def get_book(self, book_filename):
        if book_filename not in self.search_tree:
            return None

        return self.search_tree[book_filename]


    def clear(self):
        if len(books_adding) > 0:
            for item in books_adding:
                if os.path.isfile(item):
                    os.remove(item)
                elif os.path.isdir(item):
                    shutil.rmtree(item)

        books = walkdir(self.ibooks_path)
        for book in books:
            if not self.check_book(get_book_info(book)):
                if os.path.isfile(book):
                    os.remove(book)
                elif os.path.isdir(book):
                    shutil.rmtree(book)

    def build_tree(self):
        tree = []
        for key in self.search_tree:
            tree.append(self.search_tree[key])

        self.tree['Books'] = tree

    def save(self):
        global books_transfered_num
        global books_adding
        try:
            self.build_tree()
            writePlist(self.tree, self.plist, binary=self.is_binary)
        except IOError:
            print("\nIf you seen this message, please reopen your ibooks. Don't disconnect your ipad!\n"
                  "If this message keep alerting, please check if any book damaged(no cover), then remove it.\n"
                  "Or just remove one book from ibooks.")
            time.sleep(20)
            self.save()

        except:
            self.clear()
            print "Unexpected error:", sys.exc_info()[0]
            raise


class Book():
    def __init__(self, book):
        self.tree = {}
        self.add_attrib('Name', os.path.splitext(os.path.basename(book))[0])
        self.add_attrib('Inserted-By-iBooks', False)
        self.add_attrib('Path', os.path.basename(book))

    def add_attrib(self, key, value):
        self.tree[key] = value

    def get_attrib(self, key):
        return self.tree[key]


def hash_md5(book):
    md5 = hashlib.md5()
    md5.update(open(book, 'rb').read())

    return md5.hexdigest().upper()


def get_string(val):
    if isinstance(val, int):
        return str(val)

    if isinstance(val, str):
        return unicode(val, 'utf8')

    if isinstance(val, list):
        new_val = []
        for item in val:
            new_val.append(get_string(item))

        return ' '.join(new_val)

    return val


def get_file_info(book):
    result = {
        'title': '',
        'author': ''
    }
    metadata = exif.get_json(book)

    filename = os.path.splitext(get_string(metadata[0]['File:FileName']))[0]
    file_info = filename.split('-')

    result['title'] = filename
    result['author'] = get_string(file_info[-1])

    return result


def get_book_info(book):
    result = {
        'title': '',
        'genre': '',
        'author': '',
        'filename': os.path.basename(book),
        'hash': hash_md5(book)
    }

    folder_path = os.path.dirname(book)
    path, genre = os.path.split(folder_path)
    result['genre'] = get_string(genre)

    metadata = exif.get_json(book)

    try:
        title = get_string(metadata[0]['XMP:Title'])
        author = get_string(metadata[0]['XMP:Creator'])
    except:
        file_info = get_file_info(book)

        title = file_info['title']
        author = file_info['author']

    search_obj = re.search(r'[A-Za-z0-9]+', author, re.M|re.I)
    if search_obj and len(search_obj.group(0)) > 10:# try to avoid unreadable author name
        file_info = get_file_info(book)

        title = file_info['title']
        author = file_info['author']

    result['title'] = title
    result['author'] = author

    return result


def report_progress(book, flag):
    if not is_verbose:
        return
    bar_len = int(int(os.popen('stty size', 'r').read().split()[1])*.65)
    sys.stdout.write("Transferring: %-*s[%s]\n" % (bar_len, book, flag))
    sys.stdout.flush()


def addbooks(root_dir, books):
    global books_failed_list
    global books_adding
    global book_num
    global IBooksInstance
    global books_transfered_num
    book_num = len(books)
    if book_num == 0:
        print 'No pdf or epub file found!'
        return

    # init vars
    plist = os.path.join(root_dir, ibooks_plist)
    dest = os.path.dirname(plist)

    if not os.path.exists(dest):
        os.makedirs(dest)
    step_len = 0
    bar_len = int(int(os.popen('stty size', 'r').read().split()[1])*.75)

    print('Start transferring...')
    # init processing bar
    if not is_verbose:
        bar_len = int(int(os.popen('stty size', 'r').read().split()[1])*.75)
        step_len = 0
        sys.stdout.write("[%s]" % (" " * (bar_len+1)))
        sys.stdout.flush()
        sys.stdout.write('%s%s' % ("\b" * (bar_len+2),'>'))
        sys.stdout.flush()

    for book in books:
        step_len += bar_len

        book = book.decode('utf-8')
        ext = os.path.splitext(book)[-1].upper()
        book_dest_folder = os.path.join(dest, os.path.basename(book))

        if not os.path.exists(book) or (ext not in ['.PDF', '.EPUB']):
            report_progress(book, 'pass by extension')
            books_failed_list.append(book)
            continue

        book_info = get_book_info(book)
        old_book = IBooksInstance.get_book(os.path.basename(book))
        old_book_delete = False

        if old_book and old_book['Genre'] == book_info['genre'] and old_book['Name'] == book_info['title'] and \
                        old_book['Artist'] == book_info['author'] and old_book['Package Hash'] == book_info['hash']:
            report_progress(book, 'pass since book exists')
            books_failed_list.append(book)
            continue

        books_adding.append(book_dest_folder)
        need_transfer = False
        if '.PDF' == ext:
            if old_book:
                report_progress(book, 'update since book changed')
                if old_book['Package Hash'] == book_info['hash'] and old_book['Path'] != os.path.basename(book):
                    shutil.move(os.path.join(dest, os.path.basename(old_book['Path'])), book_dest_folder)
                else:
                    need_transfer = True
            else:
                report_progress(book, 'new')
                need_transfer = True

            if need_transfer:
                shutil.copyfile(book, book_dest_folder)
                if old_book:
                    old_book_delete = True

        elif '.EPUB' == ext:
            if old_book:
                report_progress(book, 'update since book changed')
                if old_book['Package Hash'] == book_info['hash'] and old_book['Path'] != os.path.basename(book):
                    shutil.move(os.path.join(dest, os.path.basename(old_book['Path'])), book_dest_folder)
                else:
                    need_transfer = True
            else:
                report_progress(book, 'new')
                need_transfer = True

            if need_transfer:
                if not os.path.exists(book_dest_folder):
                    os.mkdir(book_dest_folder)

                with zipfile.ZipFile(book, "r") as z:
                    try:
                        z.extractall(book_dest_folder)

                    except KeyboardInterrupt:

                        IBooksInstance.save()
                        IBooksInstance.clear()
                        transfer_info('Interrupted')
                        sys.exit(0)
                    except:
                        print("Unexpected error while unzip %s:"%(book, sys.exc_info()[0]))
                        books_failed_list.append(book)
                        continue

                if old_book:
                    old_book_delete = True

        book_obj = Book(book)
        book_obj.add_attrib('Package Hash', book_info['hash'])
        book_obj.add_attrib('Genre', book_info['genre'])
        if book_info['title']:
            book_obj.add_attrib('Name', book_info['title'])
        book_obj.add_attrib('Artist', book_info['author'])

        if old_book:
            IBooksInstance.remove_book(old_book, old_book_delete)

        IBooksInstance.add_book(book_obj)
        books_adding.remove(book_dest_folder)
        books_transfered_num += 1

        if not is_verbose:
            step_len += bar_len
            if step_len >= book_num:
                sys.stdout.write("\b%s>" % '='*int(float(step_len)/book_num))
                sys.stdout.flush()
                step_len = step_len%book_num

    IBooksInstance.save()
    transfer_info()


def transfer_info(prefix = 'Finished'):
    sys.stdout.write('\n')
    print('%s: %s books transfered' % (prefix, str(books_transfered_num)))
    if is_verbose and len(books_failed_list):
        print('The following books are not transfered:')
        for book in books_failed_list:
            print(book)
    elif len(books_failed_list):
        print('%s books are not transfered' % str(len(books_failed_list)))


def walkdir(dirname):
    books = []
    for cur, _dirs, files in os.walk(dirname):
        for f in files:
            real_path = os.path.join(cur, f)
            books.append(real_path)

    return books


def check_pad(path):
    ibooks_path = os.path.join(path, 'Books')
    ibooks_purchases_path = os.path.join(ibooks_path, 'Purchases')
    check_path = ''
    is_pad = True
    if not os.path.exists(ibooks_path):
        is_pad = False
        check_path = ibooks_path
    elif not os.path.exists(ibooks_purchases_path):
        is_pad = False
        check_path = ibooks_purchases_path

    if is_pad:
        return

    print('Seems you give wrong ipad mount point, please check!')
    print("Path not exists: %s" % check_path)
    sys.exit(-1)

if __name__ == '__main__':
    # global vars begin
    ipad_root = ''
    ibooks_plist = 'Books/Purchases/Purchases.plist'
    IBooksInstance = None
    book_num = 0
    books_transfered_num = 0
    books_failed_list = []
    books_adding = []
    is_verbose = False
    # global vars end

    parser = argparse.ArgumentParser(description='Transfer books to ipad')
    parser.add_argument('-d', '--ipad', action='store', dest='IPAD_MOUNTED_POINT',
                        help='Indicate path ipad is mounted; if omitted, '
                             'the current working directory will be treated.')
    parser.add_argument('-b', '--book', type=str, required=True, action='append', dest='BOOK', nargs='+',
                        help='Indicate book path to transfer; if path is a directory, '
                             'all books under that will be transfered.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='VERBOSE',
                        help='increase output verbosity.')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')

    args = parser.parse_args()
    book_list = args.BOOK[0]
    is_verbose = args.VERBOSE

    if args.IPAD_MOUNTED_POINT is None:
        ipad_root = os.getcwd()
    else:
        ipad_root = os.path.abspath(args.IPAD_MOUNTED_POINT)

    IBooksInstance = IBooks(os.path.join(ipad_root, ibooks_plist))

    try:
        books = []
        check_pad(ipad_root)

        for book_path in book_list:
            if os.path.isdir(book_path):
                books += walkdir(book_path)
            else:
                books.append(book_path)

        if len(books) > 0:
            addbooks(os.path.abspath(ipad_root), books)
    except Exception,e:
        IBooksInstance.save()
        IBooksInstance.clear()
        traceback.print_exc()